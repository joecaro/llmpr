name: Generate PR Description

on:
  pull_request:
    types: [opened]

jobs:
  generate-pr-description:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for diff
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Debug environment
        run: |
          echo "PR Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Current Branch: ${{ github.ref_name }}"
          echo "Has API Key: ${{ secrets.OPENAI_API_KEY != '' }}"
          echo "Working Directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo "Git Status:"
          git status
          echo "Node Version:"
          node --version
          echo "Npm Version:"
          npm --version
      
      - name: Generate diff directly
        id: git-diff
        run: |
          # Set git config for the action
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          # Check if base branch exists
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          echo "Base branch is: $BASE_BRANCH"
          git fetch origin $BASE_BRANCH
          
          # Get the diff
          git diff origin/$BASE_BRANCH > git_diff.txt
          
          # Show diff stats
          echo "Diff stats:"
          git diff --stat origin/$BASE_BRANCH
          
          # Check file size
          echo "Diff file size: $(wc -l git_diff.txt)"
      
      - name: Run node script directly
        id: generate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: |
          # Create a simple script to generate PR description using the existing code
          cat > generate-pr.js << 'EOF'
          import fs from 'fs';
          import { exec } from 'child_process';
          import axios from 'axios';
          
          const apiKey = process.env.OPENAI_API_KEY;
          const baseBranch = process.env.BASE_BRANCH || 'main';
          
          console.log(`Using base branch: ${baseBranch}`);
          
          // Read diff from file
          const diff = fs.readFileSync('git_diff.txt', 'utf8');
          console.log(`Diff length: ${diff.length} characters`);
          
          if (diff.trim() === '') {
            console.log('No changes detected.');
            process.exit(1);
          }
          
          // Build the prompt
          const prompt = `
          You are an assistant that helps write PR descriptions.
          The diff from my branch compared to ${baseBranch} is:
          ${diff}
          
          Write a complete, concise, and professional PR description including:
          1. Summary of changes
          2. Purpose of the PR
          3. Key implementation details
          4. Any important notes or warnings
          
          The PR description should be in markdown format.
          The PR description should be no more than 100 words.
          `;
          
          // Call OpenAI API
          async function generateDescription() {
            try {
              console.log('Calling OpenAI API...');
              const response = await axios.post(
                'https://api.openai.com/v1/chat/completions',
                {
                  model: 'gpt-4o-mini',
                  messages: [{ role: 'system', content: prompt }]
                },
                {
                  headers: { 'Authorization': `Bearer ${apiKey}` }
                }
              );
              
              const description = response.data.choices[0].message.content.trim();
              console.log('Generated description successfully.');
              
              // Write to file
              fs.writeFileSync('pr_description.md', description);
              console.log('Description saved to pr_description.md');
              
              return description;
            } catch (error) {
              console.error('API Error:', error.response?.data?.error?.message || error.message);
              // Create fallback description
              const fallback = "This PR was created automatically. The description generator encountered an error.";
              fs.writeFileSync('pr_description.md', fallback);
              return fallback;
            }
          }
          
          generateDescription().catch(error => {
            console.error('Unhandled error:', error);
            process.exit(1);
          });
          EOF
          
          # Run the script
          node generate-pr.js
          
          # Check if file exists
          if [ -f "pr_description.md" ]; then
            echo "PR description file created successfully"
            echo "Content:"
            cat pr_description.md
            
            # Save to output
            PR_DESCRIPTION=$(cat pr_description.md)
            echo "description<<EOF" >> $GITHUB_OUTPUT
            echo "$PR_DESCRIPTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Error: pr_description.md was not created"
            echo "Creating default description"
            echo "This PR was created automatically. The description generator encountered an error." > pr_description.md
            echo "description=This PR was created automatically. The description generator encountered an error." >> $GITHUB_OUTPUT
          fi
      
      - name: Update PR description
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prDescription = fs.readFileSync('pr_description.md', 'utf8');
            
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: prDescription
            }); 